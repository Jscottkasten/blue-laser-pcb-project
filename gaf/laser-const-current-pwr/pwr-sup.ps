%!PS-Adobe-3.0
%%Creator: gEDA gschem 20080127
%%CreationDate: Sun Nov 15 13:20:15 2009
%%Title: /home/jsk/Blue Laser/gaf/laser-const-current-pwr/pwr-sup.sch
%%Author: jsk
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

% Show a string, with an overbar over it
% string charshow -
/charshow {
    drawoverbar {
	% draw an overbar for the character
	gsave
	fontsize 10.0 div setlinewidth
	0 fontsize rmoveto  % move to (0,overbarheight) 
	dup stringwidth pop 0 rlineto % draw line to 
	stroke
	grestore
    } if
    show
} bind def

/overbarshow {
    /drawoverbar false def      % start by not drawing overbars
    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		/drawoverbar drawoverbar not def
	    } {
		% otherwise render the character 
		(\\ ) dup 1 4 -1 roll put % draw a \ and the character
		charshow                      % render the string
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
		% no, reset flag and draw character
		( ) dup 0 4 -1 roll put	% create one character string
		charshow
	    } ifelse
	} ifelse
    } forall
} bind def
% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 499 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 111.111115 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
42100 46400 42100 46200 10 line
gsave
false true false false 208.000000 [(1) ] 270 42150 46250 111.111115 text
grestore
42100 45300 42100 45500 10 line
gsave
false false false false 208.000000 [(2) ] 270 42150 45450 111.111115 text
grestore
42300 46100 41900 46100 10 line
42200 46000 42000 46000 10 line
42300 45900 41900 45900 10 line
42200 45800 42000 45800 10 line
42100 45500 42100 45600 10 line
42100 46200 42100 46100 10 line
42300 45700 41900 45700 10 line
42200 45600 42000 45600 10 line
grestore
gsave
false false false true 260.000000 [(B1) ] 270 42700 46000 138.888885 text
grestore
gsave
false false false false 260.000000 [(9 - 12 V) ] 0 40800 45800 138.888885 text
grestore
gsave
42500 48000 42650 48000 10 line
gsave
false false false false 208.000000 [(1) ] 0 42550 48050 111.111115 text
grestore
43350 48000 43500 48000 10 line
gsave
false false false false 208.000000 [(2) ] 0 43400 48050 111.111115 text
grestore
42650 48000 42825 48000 10 line
43350 48000 43175 48000 10 line
42800 48085 43200 48085 10 line
42839 48000 14 0 360 10 darc
43162 48000 14 0 360 10 darc
42970 48255 43020 48255 10 line
42970 48205 43020 48205 10 line
42970 48205 42995 48155 10 line
43020 48205 42995 48155 10 line
42995 48205 42995 48255 10 line
42995 48155 42995 48086 10 line
grestore
gsave
false false false false 260.000000 [(S1) ] 0 42900 48300 138.888885 text
grestore
gsave
47200 48100 47100 47900 10 line
47100 47900 47000 48100 10 line
47000 48100 46900 47900 10 line
46900 47900 46800 48100 10 line
47200 48100 47300 47900 10 line
47300 47900 47350 48000 10 line
47500 48000 47350 48000 10 line
46600 48000 46752 48000 10 line
46801 48100 46750 48000 10 line
grestore
gsave
false false false false 260.000000 [(R1) ] 0 47000 47600 138.888885 text
grestore
gsave
false false false false 260.000000 [(12 Ohm) ] 0 46700 48300 138.888885 text
grestore
gsave
53300 45500 53500 45400 10 line
53500 45400 53300 45300 10 line
53300 45300 53500 45200 10 line
53500 45200 53300 45100 10 line
53300 45500 53500 45600 10 line
53500 45600 53400 45650 10 line
53400 45800 53400 45650 10 line
53400 44900 53400 45052 10 line
53300 45101 53400 45050 10 line
grestore
gsave
false false false false 260.000000 [(R4) ] 90 53800 45200 138.888885 text
grestore
gsave
false false false false 260.000000 [(100K Ohm) ] 0 53600 44800 138.888885 text
grestore
gsave
54400 43600 54300 43400 10 line
54300 43400 54200 43600 10 line
54200 43600 54100 43400 10 line
54100 43400 54000 43600 10 line
54400 43600 54500 43400 10 line
54500 43400 54550 43500 10 line
54700 43500 54550 43500 10 line
53800 43500 53952 43500 10 line
54001 43600 53950 43500 10 line
grestore
gsave
false false false false 260.000000 [(R5) ] 0 53700 43800 138.888885 text
grestore
gsave
false false false false 260.000000 [(1 Ohm) ] 0 54300 43800 138.888885 text
grestore
gsave
false false false false 260.000000 [(1%) ] 0 54200 43100 138.888885 text
grestore
gsave
48500 48350 48500 48500 10 line
48500 48100 48448 48201 10 line
48501 48101 48553 48202 10 line
48600 48100 48500 47900 10 line
48500 47900 48400 48100 10 line
48400 48100 48300 47900 10 line
48300 47900 48200 48100 10 line
48600 48100 48700 47900 10 line
48700 47900 48750 48000 10 line
48900 48000 48750 48000 10 line
48000 48000 48152 48000 10 line
48201 48100 48150 48000 10 line
48500 48100 48500 48350 10 line
grestore
gsave
false false false false 260.000000 [(R2) ] 0 48400 47600 138.888885 text
grestore
gsave
false false false false 260.000000 [(1K Ohm) ] 0 48700 48300 138.888885 text
grestore
gsave
48000 47100 47900 46900 10 line
47900 46900 47800 47100 10 line
47800 47100 47700 46900 10 line
47700 46900 47600 47100 10 line
48000 47100 48100 46900 10 line
48100 46900 48150 47000 10 line
48300 47000 48150 47000 10 line
47400 47000 47552 47000 10 line
47601 47100 47550 47000 10 line
grestore
gsave
false false false false 260.000000 [(R3) ] 0 47800 46600 138.888885 text
grestore
gsave
false false false false 260.000000 [(33 Ohm) ] 0 47500 47300 138.888885 text
grestore
gsave
44000 45300 44000 45500 10 line
44000 46200 44000 46000 10 line
43800 45700 44200 45700 10 line
43800 45800 44200 45800 10 line
44000 46000 44000 45800 10 line
44000 45700 44000 45500 10 line
grestore
gsave
false false false false 260.000000 [(C1) ] 90 44600 45700 138.888885 text
grestore
gsave
false false false false 260.000000 [(1uF) ] 0 43400 45900 138.888885 text
grestore
gsave
51200 45000 51200 45200 10 line
51200 45900 51200 45700 10 line
51000 45400 51400 45400 10 line
51000 45500 51400 45500 10 line
51200 45700 51200 45500 10 line
51200 45400 51200 45200 10 line
grestore
gsave
false false false false 260.000000 [(C2) ] 90 51700 45300 138.888885 text
grestore
gsave
false false false false 260.000000 [(0.1 uF) ] 0 50500 45700 138.888885 text
grestore
gsave
false false false false 260.000000 [(ceramic) ] 0 50300 45000 138.888885 text
grestore
gsave
52500 45900 52500 45700 10 line
gsave
false true false false 208.000000 [(P) ] 270 52550 45750 111.111115 text
grestore
52500 45000 52500 45200 10 line
gsave
false false false false 208.000000 [(N) ] 270 52550 45150 111.111115 text
grestore
52700 45500 52300 45500 10 line
52500 45200 52500 45400 10 line
52500 45500 52500 45700 10 line
52500 44700 700 75 105 10 darc
52700 45611 52600 45611 10 line
52649 45560 52649 45660 10 line
grestore
gsave
false false false false 260.000000 [(C3) ] 90 53000 45300 138.888885 text
grestore
gsave
false false false false 260.000000 [(10 uF) ] 0 51900 45700 138.888885 text
grestore
gsave
false false false false 260.000000 [(tantalum) ] 0 51600 45000 138.888885 text
grestore
gsave
49600 45300 50000 45300 10 line
49600 45300 49800 45600 10 line
49800 45600 50000 45300 10 line
49600 45600 50000 45600 10 line
49800 45000 49800 45200 10 line
49800 45900 49800 45700 10 line
49800 45700 49800 45600 10 line
49800 45300 49800 45200 10 line
grestore
gsave
false false false false 260.000000 [(D1) ] 90 50300 45400 138.888885 text
grestore
gsave
false false false false 260.000000 [(!N4001) ] 90 49400 45100 138.888885 text
grestore
gsave
55300 45900 55700 45900 10 line
55300 45900 55500 45600 10 line
55500 45600 55700 45900 10 line
55300 45600 55700 45600 10 line
55500 45300 55500 45500 10 line
55500 46200 55500 46000 10 line
55500 45500 55500 45600 10 line
55500 45900 55500 46000 10 line
55700 45800 55800 45700 10 line
55700 45700 55800 45600 10 line
55800 45600 55750 45625 10 line
55800 45600 55775 45650 10 line
55800 45700 55750 45725 10 line
55800 45700 55775 45750 10 line
grestore
gsave
false false false true 260.000000 [(LD1) ] 90 55950 45750 138.888885 text
grestore
gsave
53800 42600 54000 42600 10 line
gsave
false false false false 208.000000 [(2) ] 90 53950 42650 111.111115 text
grestore
54800 42600 54600 42600 10 line
gsave
false false false false 208.000000 [(1) ] 90 54750 42650 111.111115 text
grestore
54100 42600 50 0 360 10 darc
54500 42600 50 0 360 10 darc
54000 42500 54600 42500 10 line
54600 42500 54600 42700 10 line
54600 42700 54000 42700 10 line
54000 42700 54000 42500 10 line
grestore
gsave
false true false true 260.000000 [(J1) ] 0 54100 43000 138.888885 text
grestore
gsave
false false false false 260.000000 [(Laser diode current monitor.) ] 0 53100 42200 138.888885 text
grestore
gsave
44500 47500 45900 47500 10 line
45900 47500 45900 48500 10 line
45900 48500 44500 48500 10 line
44500 48500 44500 47500 10 line
45900 48000 46200 48000 10 line
gsave
false false false false 260.000000 [(2) ] 0 46000 48100 138.888885 text
grestore
gsave
false true false false 260.000000 [(Vout) ] 0 45800 48000 138.888885 text
grestore
44200 48000 44500 48000 10 line
gsave
false true false false 260.000000 [(3) ] 0 44400 48100 138.888885 text
grestore
gsave
false false false false 260.000000 [(Vin) ] 0 44600 48000 138.888885 text
grestore
45200 47200 45200 47500 10 line
gsave
false false false false 260.000000 [(1) ] 0 45300 47300 138.888885 text
grestore
gsave
true false false false 260.000000 [(Adjust) ] 0 45200 47600 138.888885 text
grestore
gsave
false false false false 260.000000 [(LM317) ] 0 44500 48600 138.888885 text
grestore
grestore
gsave
false true false false 260.000000 [(U1) ] 0 45900 48600 138.888885 text
grestore
42100 46400 42100 48000 10 line
42100 48000 42500 48000 10 line
43500 48000 44200 48000 10 line
44000 46200 44000 48000 10 line
46200 48000 46600 48000 10 line
47500 48000 47700 48000 10 line
47700 48000 47700 48500 10 line
47700 48500 48500 48500 10 line
47400 47000 46400 47000 10 line
46400 47000 46400 48000 10 line
49100 47600 55500 47600 10 line
49100 47000 48300 47000 10 line
49800 46400 53400 46400 10 line
51700 46400 51700 47600 10 line
53400 44400 53400 44900 10 line
52500 45000 52500 44400 10 line
51200 45000 51200 44400 10 line
49800 45900 49800 46400 10 line
53400 45800 53400 46400 10 line
52500 45900 52500 46400 10 line
42100 45300 42100 43000 10 line
42100 43000 53300 43000 10 line
53300 43500 53800 43500 10 line
53300 42600 53300 43500 10 line
53300 42600 53800 42600 10 line
54700 43500 55000 43500 10 line
55000 42600 55000 43500 10 line
55000 42600 54800 42600 10 line
55000 43000 55500 43000 10 line
51700 43000 51700 44400 10 line
44000 45300 44000 43000 10 line
gsave
false false false false 260.000000 [(100 mW blue-violet laser diode driver.) ] 0 50200 41000 138.888885 text
grestore
gsave
false false false false 260.000000 [(pwr-sup.sch) ] 0 50000 40400 138.888885 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 50400 40100 138.888885 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 51900 40100 138.888885 text
grestore
gsave
false false false false 260.000000 [(1.1) ] 0 54000 40400 138.888885 text
grestore
gsave
false false false false 260.000000 [(JSK) ] 0 54000 40100 138.888885 text
grestore
45200 47200 45200 46400 10 line
45200 46400 49500 46400 10 line
49500 46400 49500 47600 10 line
49100 47000 49100 48000 10 line
48900 48000 49100 48000 10 line
51200 45900 51200 46400 10 line
49800 45000 49800 44400 10 line
49800 44400 53400 44400 10 line
55500 46200 55500 47600 10 line
55500 45300 55500 43000 10 line
newpath
44000 48000
30
0 360 arc
fill
newpath
44000 48000
30
0 360 arc
fill
newpath
44000 48000
30
0 360 arc
fill
newpath
46400 48000
30
0 360 arc
fill
newpath
46400 48000
30
0 360 arc
fill
newpath
46400 48000
30
0 360 arc
fill
newpath
49100 47600
30
0 360 arc
fill
newpath
51700 47600
30
0 360 arc
fill
newpath
49500 47600
30
0 360 arc
fill
newpath
49100 47600
30
0 360 arc
fill
newpath
51700 46400
30
0 360 arc
fill
newpath
52500 46400
30
0 360 arc
fill
newpath
51200 46400
30
0 360 arc
fill
newpath
51700 46400
30
0 360 arc
fill
newpath
51700 47600
30
0 360 arc
fill
newpath
51700 47600
30
0 360 arc
fill
newpath
51700 46400
30
0 360 arc
fill
newpath
52500 44400
30
0 360 arc
fill
newpath
52500 44400
30
0 360 arc
fill
newpath
51200 44400
30
0 360 arc
fill
newpath
51200 44400
30
0 360 arc
fill
newpath
52500 46400
30
0 360 arc
fill
newpath
52500 46400
30
0 360 arc
fill
newpath
53300 43000
30
0 360 arc
fill
newpath
53300 43000
30
0 360 arc
fill
newpath
51700 43000
30
0 360 arc
fill
newpath
44000 43000
30
0 360 arc
fill
newpath
53300 43000
30
0 360 arc
fill
newpath
55000 43000
30
0 360 arc
fill
newpath
55000 43000
30
0 360 arc
fill
newpath
55000 43000
30
0 360 arc
fill
newpath
51700 43000
30
0 360 arc
fill
newpath
51700 44400
30
0 360 arc
fill
newpath
51700 43000
30
0 360 arc
fill
newpath
51700 44400
30
0 360 arc
fill
newpath
44000 43000
30
0 360 arc
fill
newpath
44000 43000
30
0 360 arc
fill
newpath
49500 47600
30
0 360 arc
fill
newpath
49500 47600
30
0 360 arc
fill
newpath
49100 47600
30
0 360 arc
fill
newpath
51200 46400
30
0 360 arc
fill
newpath
51200 46400
30
0 360 arc
fill
newpath
52500 44400
30
0 360 arc
fill
newpath
51200 44400
30
0 360 arc
fill
newpath
51700 44400
30
0 360 arc
fill
showpage
%%End
